package teste;

import comercio.ProdutoInfo;

/**
 * Classe de teste para ProdutoInfo.
 * Testa todos os m√©todos e casos especiais.
 */
public class ProdutoInfoTest {
    
    /**
     * Contador de testes executados e passados
     */
    private static int testesExecutados = 0;
    private static int testesPassados = 0;
    
    
    /**
     * M√©todo principal que executa todos os testes
     */
    public static void main(String[] args) {
        System.out.println("========================================");
        System.out.println("  TESTES DA CLASSE ProdutoInfo");
        System.out.println("========================================\n");
        
        // Executar todos os testes
        testarConstrutor();
        testarGetters();
        testarSetPreco();
        testarPrecoEmEuros();
        testarValidacoes();
        testarEquals();
        
        // Mostrar resultados finais
        System.out.println("\n========================================");
        System.out.println("  RESULTADOS FINAIS");
        System.out.println("========================================");
        System.out.println("Testes executados: " + testesExecutados);
        System.out.println("Testes passados: " + testesPassados);
        System.out.println("Testes falhados: " + (testesExecutados - testesPassados));
        
        if (testesPassados == testesExecutados) {
            System.out.println("\n‚úÖ TODOS OS TESTES PASSARAM! üéâ");
        } else {
            System.out.println("\n‚ùå ALGUNS TESTES FALHARAM!");
        }
    }
    
    
    /**
     * Testa se o construtor cria o produto corretamente
     */
    private static void testarConstrutor() {
        System.out.println("--- Teste: Construtor ---");
        
        try {
            ProdutoInfo p = new ProdutoInfo("202-006", "Continente", "Massa Esparguete", 231);
            
            // Verificar se os valores foram guardados corretamente
            boolean passou = true;
            
            if (!p.getCodigoBarras().equals("202-006")) {
                System.out.println("‚ùå C√≥digo de barras incorreto!");
                passou = false;
            }
            
            if (!p.getMarca().equals("Continente")) {
                System.out.println("‚ùå Marca incorreta!");
                passou = false;
            }
            
            if (!p.getModelo().equals("Massa Esparguete")) {
                System.out.println("‚ùå Modelo incorreto!");
                passou = false;
            }
            
            if (p.getPreco() != 231) {
                System.out.println("‚ùå Pre√ßo incorreto!");
                passou = false;
            }
            
            testesExecutados++;
            if (passou) {
                testesPassados++;
                System.out.println("‚úÖ Construtor funciona corretamente!");
            }
            
        } catch (Exception e) {
            System.out.println("‚ùå Exce√ß√£o inesperada: " + e.getMessage());
            testesExecutados++;
        }
        
        System.out.println();
    }
    
    
    /**
     * Testa se os getters retornam os valores corretos
     */
    private static void testarGetters() {
        System.out.println("--- Teste: Getters ---");
        
        try {
            ProdutoInfo p = new ProdutoInfo("123-ABC", "TestMarca", "TestModelo", 500);
            
            boolean passou = true;
            
            // Testar cada getter
            if (!p.getCodigoBarras().equals("123-ABC")) {
                System.out.println("‚ùå getCodigoBarras() falhou!");
                passou = false;
            }
            
            if (!p.getMarca().equals("TestMarca")) {
                System.out.println("‚ùå getMarca() falhou!");
                passou = false;
            }
            
            if (!p.getModelo().equals("TestModelo")) {
                System.out.println("‚ùå getModelo() falhou!");
                passou = false;
            }
            
            if (p.getPreco() != 500) {
                System.out.println("‚ùå getPreco() falhou!");
                passou = false;
            }
            
            testesExecutados++;
            if (passou) {
                testesPassados++;
                System.out.println("‚úÖ Todos os getters funcionam!");
            }
            
        } catch (Exception e) {
            System.out.println("‚ùå Exce√ß√£o inesperada: " + e.getMessage());
            testesExecutados++;
        }
        
        System.out.println();
    }
    
    
    /**
     * Testa se o setPreco altera o pre√ßo corretamente
     */
    private static void testarSetPreco() {
        System.out.println("--- Teste: setPreco ---");
        
        try {
            ProdutoInfo p = new ProdutoInfo("123", "Marca", "Modelo", 100);
            
            // Alterar o pre√ßo
            p.setPreco(250);
            
            if (p.getPreco() == 250) {
                testesExecutados++;
                testesPassados++;
                System.out.println("‚úÖ setPreco() funciona corretamente!");
            } else {
                testesExecutados++;
                System.out.println("‚ùå setPreco() n√£o alterou o pre√ßo!");
            }
            
        } catch (Exception e) {
            System.out.println("‚ùå Exce√ß√£o inesperada: " + e.getMessage());
            testesExecutados++;
        }
        
        System.out.println();
    }
    
    
    /**
     * Testa a convers√£o de c√™ntimos para euros
     */
    private static void testarPrecoEmEuros() {
        System.out.println("--- Teste: getPrecoEmEuros ---");
        
        try {
            ProdutoInfo p = new ProdutoInfo("123", "Marca", "Modelo", 231);
            
            double precoEuros = p.getPrecoEmEuros();
            
            // Verificar se 231 c√™ntimos = 2.31 euros
            if (Math.abs(precoEuros - 2.31) < 0.001) {
                testesExecutados++;
                testesPassados++;
                System.out.println("‚úÖ Convers√£o para euros funciona! (231 c√™ntimos = 2.31‚Ç¨)");
            } else {
                testesExecutados++;
                System.out.println("‚ùå Convers√£o incorreta! Esperado: 2.31‚Ç¨, Obtido: " + precoEuros + "‚Ç¨");
            }
            
        } catch (Exception e) {
            System.out.println("‚ùå Exce√ß√£o inesperada: " + e.getMessage());
            testesExecutados++;
        }
        
        System.out.println();
    }
    
    
    /**
     * Testa se as valida√ß√µes funcionam (valores inv√°lidos devem dar erro)
     */
    private static void testarValidacoes() {
        System.out.println("--- Teste: Valida√ß√µes ---");
        int subtestes = 0;
        int subpassados = 0;
        
        // Teste 1: C√≥digo vazio
        try {
            new ProdutoInfo("", "Marca", "Modelo", 100);
            System.out.println("‚ùå Deveria rejeitar c√≥digo vazio!");
            subtestes++;
        } catch (IllegalArgumentException e) {
            System.out.println("‚úÖ Rejeitou c√≥digo vazio corretamente");
            subtestes++;
            subpassados++;
        }
        
        // Teste 2: Marca vazia
        try {
            new ProdutoInfo("123", "", "Modelo", 100);
            System.out.println("‚ùå Deveria rejeitar marca vazia!");
            subtestes++;
        } catch (IllegalArgumentException e) {
            System.out.println("‚úÖ Rejeitou marca vazia corretamente");
            subtestes++;
            subpassados++;
        }
        
        // Teste 3: Modelo vazio
        try {
            new ProdutoInfo("123", "Marca", "", 100);
            System.out.println("‚ùå Deveria rejeitar modelo vazio!");
            subtestes++;
        } catch (IllegalArgumentException e) {
            System.out.println("‚úÖ Rejeitou modelo vazio corretamente");
            subtestes++;
            subpassados++;
        }
        
        // Teste 4: Pre√ßo negativo
        try {
            new ProdutoInfo("123", "Marca", "Modelo", -50);
            System.out.println("‚ùå Deveria rejeitar pre√ßo negativo!");
            subtestes++;
        } catch (IllegalArgumentException e) {
            System.out.println("‚úÖ Rejeitou pre√ßo negativo corretamente");
            subtestes++;
            subpassados++;
        }
        
        // Teste 5: setPreco com valor negativo
        try {
            ProdutoInfo p = new ProdutoInfo("123", "Marca", "Modelo", 100);
            p.setPreco(-10);
            System.out.println("‚ùå setPreco deveria rejeitar valor negativo!");
            subtestes++;
        } catch (IllegalArgumentException e) {
            System.out.println("‚úÖ setPreco rejeitou valor negativo corretamente");
            subtestes++;
            subpassados++;
        }
        
        testesExecutados++;
        if (subtestes == subpassados) {
            testesPassados++;
            System.out.println("‚úÖ Todas as valida√ß√µes funcionam! (" + subpassados + "/" + subtestes + ")");
        } else {
            System.out.println("‚ùå Algumas valida√ß√µes falharam! (" + subpassados + "/" + subtestes + ")");
        }
        
        System.out.println();
    }
    
    
    /**
     * Testa se o m√©todo equals funciona corretamente
     */
    private static void testarEquals() {
        System.out.println("--- Teste: equals ---");
        
        try {
            ProdutoInfo p1 = new ProdutoInfo("123", "Marca", "Modelo", 100);
            ProdutoInfo p2 = new ProdutoInfo("123", "OutraMarca", "OutroModelo", 200);
            ProdutoInfo p3 = new ProdutoInfo("456", "Marca", "Modelo", 100);
            
            boolean passou = true;
            
            // Produtos com mesmo c√≥digo devem ser iguais
            if (!p1.equals(p2)) {
                System.out.println("‚ùå Produtos com mesmo c√≥digo devem ser iguais!");
                passou = false;
            }
            
            // Produtos com c√≥digos diferentes devem ser diferentes
            if (p1.equals(p3)) {
                System.out.println("‚ùå Produtos com c√≥digos diferentes devem ser diferentes!");
                passou = false;
            }
            
            // Produto deve ser igual a si mesmo
            if (!p1.equals(p1)) {
                System.out.println("‚ùå Produto deve ser igual a si mesmo!");
                passou = false;
            }
            
            testesExecutados++;
            if (passou) {
                testesPassados++;
                System.out.println("‚úÖ equals() funciona corretamente!");
            }
            
        } catch (Exception e) {
            System.out.println("‚ùå Exce√ß√£o inesperada: " + e.getMessage());
            testesExecutados++;
        }
        
        System.out.println();
    }
}